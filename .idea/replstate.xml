<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1429994959839">{:repl-history {:ide [], :local [&quot;(def words [\&quot;lorem\&quot; \&quot;ipsum\&quot; \&quot;dolor\&quot; \&quot;sit\&quot; \&quot;amet\&quot;])&quot; &quot;(Math/random)&quot; &quot;(take 5 (repeatedly (partial rand-nth words)))&quot; &quot;(take 5 (repeatedly (partial cycle words)))&quot; &quot;(def words (clojure.string/split \&quot;lorem ipsum dolor sit amet\&quot;))&quot; &quot;(doc clojure.string/split)&quot; &quot;(def words (clojure.string/split #\&quot;\\\\s\&quot; \&quot;lorem ipsum dolor sit amet\&quot;))&quot; &quot;(def words (clojure.string/split \&quot;lorem ipsum dolor sit amet\&quot; #\&quot;\\\\s\&quot; ))&quot; &quot;(take 5 (cycle words))&quot; &quot;(re-find white-space-re \&quot;abc def\&quot;)&quot; &quot;(re-find white-space-re \&quot;abcdef\&quot;)&quot; &quot;(take 6 (cycle words))&quot; &quot;(take 1 (cycle words))&quot; &quot;(let [s (cycle words)]\n  (partial first s))&quot; &quot;(def foo *1)&quot; &quot;(foo)&quot; &quot;(take 6 (let [n (cycle (count words))]\n          (repeatedly (partial nth n words))))&quot; &quot;(take 6 (let [n (cycle (count words))]\n          (repeatedly (partial nth words n))))&quot; &quot;(take 6 (let [index-stream (cycle (count words))]\n          (repeatedly (partial nth words (first indext-stream)))))&quot; &quot;(take 6 (let [index-stream (cycle (count words))]\n          (repeatedly (partial nth words (first index-stream)))))&quot; &quot;(def index-stream (cycle (count words)))&quot; &quot;(first index-stream)&quot; &quot;(count words)&quot; &quot;(def index-stream (cycle (range (count words))))&quot; &quot;(take 6 index-stream)&quot; &quot;(take 6 (let [index-stream (cycle (range (count words)))]\n   (repeatedly (partial nth words (first index-stream))))) &quot; &quot;(take 3 index-stream)&quot; &quot;(fn [] (cycle words))&quot; &quot;(def known-stream *1)&quot; &quot;(known-stream)&quot; &quot;(def white-space-re #\&quot;\\s\&quot;)&quot; &quot;(def words (clojure.string/split \&quot;lorem ipsum dolor sit amet\&quot; white-space-re))&quot; &quot;words&quot; &quot;(defn f [] (first (cycle words)))&quot; &quot;(f)&quot; &quot;(first (cycle [\&quot;lorem\&quot; \&quot;ipsum\&quot; \&quot;dolor\&quot; \&quot;sit\&quot; \&quot;amet\&quot;]))&quot;], :remote []}}</component>
</project>